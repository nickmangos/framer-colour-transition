require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"colourTransition":[function(require,module,exports){
exports.colourTransition = function(layer, colour, duration, fps) {
  var a, aDiff, b, bDiff, g, gDiff, i, myInterval, newColour, oldColour, r, rDiff, startInterval;
  oldColour = null;
  newColour = null;
  oldColour = layer.backgroundColor;
  newColour = colour;
  oldColour = oldColour.substring(5, oldColour.length - 1);
  oldColour = oldColour.split(', ');
  newColour = newColour.substring(5, newColour.length - 1);
  newColour = newColour.split(', ');
  r = parseFloat(oldColour[0]);
  g = parseFloat(oldColour[1]);
  b = parseFloat(oldColour[2]);
  a = parseFloat(oldColour[3]);
  rDiff = oldColour[0] - newColour[0];
  gDiff = oldColour[1] - newColour[1];
  bDiff = oldColour[2] - newColour[2];
  aDiff = oldColour[3] - newColour[3];
  if (fps === void 0) {
    fps = 30;
  }
  rDiff = rDiff / (fps * duration);
  gDiff = gDiff / (fps * duration);
  bDiff = bDiff / (fps * duration);
  aDiff = aDiff / (fps * duration);
  i = 0;
  myInterval = null;
  startInterval = function() {
    return myInterval = Utils.interval(1 / fps, function() {
      i++;
      r = r - rDiff;
      g = g - gDiff;
      b = b - bDiff;
      a = a - aDiff;
      layer.backgroundColor = 'rgba(' + Math.round(r) + ', ' + Math.round(g) + ', ' + Math.round(b) + ', ' + a + ')';
      if (i >= (fps * duration)) {
        return clearInterval(myInterval);
      }
    });
  };
  return startInterval();
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTmljay9EZXNrdG9wL2ZyYW1lci1jb2xvdXItdHJhbnNpdGlvbi9Db2xvdXIgVHJhbnNpdGlvbiBFeGFtcGxlLmZyYW1lci9tb2R1bGVzL2NvbG91clRyYW5zaXRpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsT0FBTyxDQUFDLGdCQUFSLEdBQTJCLFNBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsUUFBaEIsRUFBMEIsR0FBMUIsR0FBQTtBQUMxQixNQUFBLDBGQUFBO0FBQUEsRUFBQSxTQUFBLEdBQVksSUFBWixDQUFBO0FBQUEsRUFDQSxTQUFBLEdBQVksSUFEWixDQUFBO0FBQUEsRUFHQSxTQUFBLEdBQVksS0FBSyxDQUFDLGVBSGxCLENBQUE7QUFBQSxFQUlBLFNBQUEsR0FBWSxNQUpaLENBQUE7QUFBQSxFQUtBLFNBQUEsR0FBWSxTQUFTLENBQUMsU0FBVixDQUFvQixDQUFwQixFQUF1QixTQUFTLENBQUMsTUFBVixHQUFtQixDQUExQyxDQUxaLENBQUE7QUFBQSxFQU1BLFNBQUEsR0FBWSxTQUFTLENBQUMsS0FBVixDQUFnQixJQUFoQixDQU5aLENBQUE7QUFBQSxFQU9BLFNBQUEsR0FBWSxTQUFTLENBQUMsU0FBVixDQUFvQixDQUFwQixFQUF1QixTQUFTLENBQUMsTUFBVixHQUFtQixDQUExQyxDQVBaLENBQUE7QUFBQSxFQVFBLFNBQUEsR0FBWSxTQUFTLENBQUMsS0FBVixDQUFnQixJQUFoQixDQVJaLENBQUE7QUFBQSxFQVVBLENBQUEsR0FBSSxVQUFBLENBQVcsU0FBVSxDQUFBLENBQUEsQ0FBckIsQ0FWSixDQUFBO0FBQUEsRUFXQSxDQUFBLEdBQUksVUFBQSxDQUFXLFNBQVUsQ0FBQSxDQUFBLENBQXJCLENBWEosQ0FBQTtBQUFBLEVBWUEsQ0FBQSxHQUFJLFVBQUEsQ0FBVyxTQUFVLENBQUEsQ0FBQSxDQUFyQixDQVpKLENBQUE7QUFBQSxFQWFBLENBQUEsR0FBSSxVQUFBLENBQVcsU0FBVSxDQUFBLENBQUEsQ0FBckIsQ0FiSixDQUFBO0FBQUEsRUFnQkEsS0FBQSxHQUFRLFNBQVUsQ0FBQSxDQUFBLENBQVYsR0FBZSxTQUFVLENBQUEsQ0FBQSxDQWhCakMsQ0FBQTtBQUFBLEVBaUJBLEtBQUEsR0FBUSxTQUFVLENBQUEsQ0FBQSxDQUFWLEdBQWUsU0FBVSxDQUFBLENBQUEsQ0FqQmpDLENBQUE7QUFBQSxFQWtCQSxLQUFBLEdBQVEsU0FBVSxDQUFBLENBQUEsQ0FBVixHQUFlLFNBQVUsQ0FBQSxDQUFBLENBbEJqQyxDQUFBO0FBQUEsRUFtQkEsS0FBQSxHQUFRLFNBQVUsQ0FBQSxDQUFBLENBQVYsR0FBZSxTQUFVLENBQUEsQ0FBQSxDQW5CakMsQ0FBQTtBQXNCQSxFQUFBLElBQUcsR0FBQSxLQUFPLE1BQVY7QUFDQyxJQUFBLEdBQUEsR0FBTSxFQUFOLENBREQ7R0F0QkE7QUFBQSxFQTBCQSxLQUFBLEdBQVEsS0FBQSxHQUFRLENBQUMsR0FBQSxHQUFNLFFBQVAsQ0ExQmhCLENBQUE7QUFBQSxFQTJCQSxLQUFBLEdBQVEsS0FBQSxHQUFRLENBQUMsR0FBQSxHQUFNLFFBQVAsQ0EzQmhCLENBQUE7QUFBQSxFQTRCQSxLQUFBLEdBQVEsS0FBQSxHQUFRLENBQUMsR0FBQSxHQUFNLFFBQVAsQ0E1QmhCLENBQUE7QUFBQSxFQTZCQSxLQUFBLEdBQVEsS0FBQSxHQUFRLENBQUMsR0FBQSxHQUFNLFFBQVAsQ0E3QmhCLENBQUE7QUFBQSxFQStCQSxDQUFBLEdBQUksQ0EvQkosQ0FBQTtBQUFBLEVBZ0NBLFVBQUEsR0FBYSxJQWhDYixDQUFBO0FBQUEsRUFpQ0EsYUFBQSxHQUFnQixTQUFBLEdBQUE7V0FDZixVQUFBLEdBQWEsS0FBSyxDQUFDLFFBQU4sQ0FBZ0IsQ0FBQSxHQUFFLEdBQWxCLEVBQXdCLFNBQUEsR0FBQTtBQUNwQyxNQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsTUFDQSxDQUFBLEdBQUksQ0FBQSxHQUFJLEtBRFIsQ0FBQTtBQUFBLE1BRUEsQ0FBQSxHQUFJLENBQUEsR0FBSSxLQUZSLENBQUE7QUFBQSxNQUdBLENBQUEsR0FBSSxDQUFBLEdBQUksS0FIUixDQUFBO0FBQUEsTUFJQSxDQUFBLEdBQUksQ0FBQSxHQUFJLEtBSlIsQ0FBQTtBQUFBLE1BT0EsS0FBSyxDQUFDLGVBQU4sR0FBd0IsT0FBQSxHQUFRLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxDQUFSLEdBQXNCLElBQXRCLEdBQTJCLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxDQUEzQixHQUF5QyxJQUF6QyxHQUE4QyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVgsQ0FBOUMsR0FBNEQsSUFBNUQsR0FBaUUsQ0FBakUsR0FBbUUsR0FQM0YsQ0FBQTtBQVFBLE1BQUEsSUFBRyxDQUFBLElBQUssQ0FBQyxHQUFBLEdBQUksUUFBTCxDQUFSO2VBQ0MsYUFBQSxDQUFjLFVBQWQsRUFERDtPQVRvQztJQUFBLENBQXhCLEVBREU7RUFBQSxDQWpDaEIsQ0FBQTtTQThDQSxhQUFBLENBQUEsRUEvQzBCO0FBQUEsQ0FBM0IsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnRzLmNvbG91clRyYW5zaXRpb24gPSAobGF5ZXIsIGNvbG91ciwgZHVyYXRpb24sIGZwcykgLT5cblx0b2xkQ29sb3VyID0gbnVsbFxuXHRuZXdDb2xvdXIgPSBudWxsXG5cdCMgc2V0IG9sZCBhbmQgbmV3IGNvbG91cnMgYXMgdmFyaWFibGVzXG5cdG9sZENvbG91ciA9IGxheWVyLmJhY2tncm91bmRDb2xvclxuXHRuZXdDb2xvdXIgPSBjb2xvdXJcblx0b2xkQ29sb3VyID0gb2xkQ29sb3VyLnN1YnN0cmluZyg1LCBvbGRDb2xvdXIubGVuZ3RoIC0gMSlcblx0b2xkQ29sb3VyID0gb2xkQ29sb3VyLnNwbGl0KCcsICcpXG5cdG5ld0NvbG91ciA9IG5ld0NvbG91ci5zdWJzdHJpbmcoNSwgbmV3Q29sb3VyLmxlbmd0aCAtIDEpXG5cdG5ld0NvbG91ciA9IG5ld0NvbG91ci5zcGxpdCgnLCAnKVxuXHRcblx0ciA9IHBhcnNlRmxvYXQob2xkQ29sb3VyWzBdKVxuXHRnID0gcGFyc2VGbG9hdChvbGRDb2xvdXJbMV0pXG5cdGIgPSBwYXJzZUZsb2F0KG9sZENvbG91clsyXSlcblx0YSA9IHBhcnNlRmxvYXQob2xkQ29sb3VyWzNdKVxuXHRcblx0IyBDYWxjdWxhdGVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHR3byBjb2xvdXJzXG5cdHJEaWZmID0gb2xkQ29sb3VyWzBdIC0gbmV3Q29sb3VyWzBdXG5cdGdEaWZmID0gb2xkQ29sb3VyWzFdIC0gbmV3Q29sb3VyWzFdXG5cdGJEaWZmID0gb2xkQ29sb3VyWzJdIC0gbmV3Q29sb3VyWzJdXG5cdGFEaWZmID0gb2xkQ29sb3VyWzNdIC0gbmV3Q29sb3VyWzNdXG5cdFxuXHQjIFNldHMgYSBmcmFtZSBkZWZhdWx0XG5cdGlmIGZwcyA9PSB1bmRlZmluZWRcblx0XHRmcHMgPSAzMFxuXHRcdFxuXHQjIENhbGN1bGF0ZSB0aGUgaW5jcmVtZW50c1xuXHRyRGlmZiA9IHJEaWZmIC8gKGZwcyAqIGR1cmF0aW9uKVxuXHRnRGlmZiA9IGdEaWZmIC8gKGZwcyAqIGR1cmF0aW9uKVxuXHRiRGlmZiA9IGJEaWZmIC8gKGZwcyAqIGR1cmF0aW9uKVxuXHRhRGlmZiA9IGFEaWZmIC8gKGZwcyAqIGR1cmF0aW9uKVxuXHQjIyBwcmludCBcIihyRGlmZiBJbmNyZW1lbnRzKVwiICsgckRpZmYgKyBcIihnRGlmZiBJbmNyZW1lbnRzKVwiICsgZ0RpZmYgKyBcIihiRGlmZiBJbmNyZW1lbnRzKVwiICsgYkRpZmYgKyBcIihhRGlmZiBJbmNyZW1lbnRzKVwiICsgYURpZmZcblx0aSA9IDBcblx0bXlJbnRlcnZhbCA9IG51bGxcblx0c3RhcnRJbnRlcnZhbCA9IC0+XG5cdFx0bXlJbnRlcnZhbCA9IFV0aWxzLmludGVydmFsICgxL2ZwcyksIC0+XG5cdFx0XHRpKytcblx0XHRcdHIgPSByIC0gckRpZmZcblx0XHRcdGcgPSBnIC0gZ0RpZmZcblx0XHRcdGIgPSBiIC0gYkRpZmZcblx0XHRcdGEgPSBhIC0gYURpZmZcblx0XHRcdCMgTnVtYmVycyBoYXZlIHRvIGJlIHdob2xlIHRvIHJlZ2VzdGVyIGFzIGEgcHJvcGVyIFJHQiB2YWx1ZS4gXG5cdFx0XHQjIFJlbmRlciBjb2xvdXIgdXNpbmcgdGhlIGNoYW5naW5nIHZhcmlhYmxlLlxuXHRcdFx0bGF5ZXIuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoJytNYXRoLnJvdW5kKHIpKycsICcrTWF0aC5yb3VuZChnKSsnLCAnK01hdGgucm91bmQoYikrJywgJythKycpJ1xuXHRcdFx0aWYgaSA+PSAoZnBzKmR1cmF0aW9uKVxuXHRcdFx0XHRjbGVhckludGVydmFsKG15SW50ZXJ2YWwpXG5cdFx0XHQjIyBwcmludCBpICsgXCIoUilcIiArIE1hdGgucm91bmQocikgKyBcIihHKVwiICsgTWF0aC5yb3VuZChnKSArIFwiKEIpXCIgKyBNYXRoLnJvdW5kKGIpICsgXCIoQSlcIiArIGFcblx0c3RhcnRJbnRlcnZhbCgpXG5cdCMjIFRPRE9cblx0IyMgU2V0IHRoZSB0cnVlIGNvbG91ciB2YWx1ZSBhZnRlciBmYWRlIGVuZHMuXG5cdCMjIEFiaWxpdHkgdG8gc3RvcCBtaWQtZmFkZS4iXX0=
