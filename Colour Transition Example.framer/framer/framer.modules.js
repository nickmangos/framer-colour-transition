require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"colourTransition":[function(require,module,exports){
exports.colourTransition = function(layer, colour, duration, fps) {
  var a, aDiff, b, bDiff, g, gDiff, i, myInterval, newColour, oldColour, r, rDiff, startInterval;
  oldColour = null;
  newColour = null;
  oldColour = layer.backgroundColor;
  newColour = colour;
  oldColour = oldColour.substring(5, oldColour.length - 1);
  oldColour = oldColour.split(', ');
  newColour = newColour.substring(5, newColour.length - 1);
  newColour = newColour.split(', ');
  r = parseFloat(oldColour[0]);
  g = parseFloat(oldColour[1]);
  b = parseFloat(oldColour[2]);
  a = parseFloat(oldColour[3]);
  rDiff = oldColour[0] - newColour[0];
  gDiff = oldColour[1] - newColour[1];
  bDiff = oldColour[2] - newColour[2];
  aDiff = oldColour[3] - newColour[3];
  if (fps === void 0) {
    fps = 30;
  }
  rDiff = rDiff / (fps * duration);
  gDiff = gDiff / (fps * duration);
  bDiff = bDiff / (fps * duration);
  aDiff = aDiff / (fps * duration);
  i = 0;
  myInterval = null;
  startInterval = function() {
    return myInterval = Utils.interval(1 / fps, function() {
      i++;
      r = r - rDiff;
      g = g - gDiff;
      b = b - bDiff;
      a = a - aDiff;
      layer.backgroundColor = 'rgba(' + Math.round(r) + ', ' + Math.round(g) + ', ' + Math.round(b) + ', ' + a + ')';
      if (i >= (fps * duration)) {
        return clearInterval(myInterval);
      }
    });
  };
  return startInterval();
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTmljay9EZXNrdG9wL2ZyYW1lci1jb2xvdXItdHJhbnNpdGlvbi9Db2xvdXIgVHJhbnNpdGlvbiBNb2R1bGUuZnJhbWVyL21vZHVsZXMvY29sb3VyVHJhbnNpdGlvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxPQUFPLENBQUMsZ0JBQVIsR0FBMkIsU0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixRQUFoQixFQUEwQixHQUExQixHQUFBO0FBQzFCLE1BQUEsMEZBQUE7QUFBQSxFQUFBLFNBQUEsR0FBWSxJQUFaLENBQUE7QUFBQSxFQUNBLFNBQUEsR0FBWSxJQURaLENBQUE7QUFBQSxFQUdBLFNBQUEsR0FBWSxLQUFLLENBQUMsZUFIbEIsQ0FBQTtBQUFBLEVBSUEsU0FBQSxHQUFZLE1BSlosQ0FBQTtBQUFBLEVBS0EsU0FBQSxHQUFZLFNBQVMsQ0FBQyxTQUFWLENBQW9CLENBQXBCLEVBQXVCLFNBQVMsQ0FBQyxNQUFWLEdBQW1CLENBQTFDLENBTFosQ0FBQTtBQUFBLEVBTUEsU0FBQSxHQUFZLFNBQVMsQ0FBQyxLQUFWLENBQWdCLElBQWhCLENBTlosQ0FBQTtBQUFBLEVBT0EsU0FBQSxHQUFZLFNBQVMsQ0FBQyxTQUFWLENBQW9CLENBQXBCLEVBQXVCLFNBQVMsQ0FBQyxNQUFWLEdBQW1CLENBQTFDLENBUFosQ0FBQTtBQUFBLEVBUUEsU0FBQSxHQUFZLFNBQVMsQ0FBQyxLQUFWLENBQWdCLElBQWhCLENBUlosQ0FBQTtBQUFBLEVBVUEsQ0FBQSxHQUFJLFVBQUEsQ0FBVyxTQUFVLENBQUEsQ0FBQSxDQUFyQixDQVZKLENBQUE7QUFBQSxFQVdBLENBQUEsR0FBSSxVQUFBLENBQVcsU0FBVSxDQUFBLENBQUEsQ0FBckIsQ0FYSixDQUFBO0FBQUEsRUFZQSxDQUFBLEdBQUksVUFBQSxDQUFXLFNBQVUsQ0FBQSxDQUFBLENBQXJCLENBWkosQ0FBQTtBQUFBLEVBYUEsQ0FBQSxHQUFJLFVBQUEsQ0FBVyxTQUFVLENBQUEsQ0FBQSxDQUFyQixDQWJKLENBQUE7QUFBQSxFQWdCQSxLQUFBLEdBQVEsU0FBVSxDQUFBLENBQUEsQ0FBVixHQUFlLFNBQVUsQ0FBQSxDQUFBLENBaEJqQyxDQUFBO0FBQUEsRUFpQkEsS0FBQSxHQUFRLFNBQVUsQ0FBQSxDQUFBLENBQVYsR0FBZSxTQUFVLENBQUEsQ0FBQSxDQWpCakMsQ0FBQTtBQUFBLEVBa0JBLEtBQUEsR0FBUSxTQUFVLENBQUEsQ0FBQSxDQUFWLEdBQWUsU0FBVSxDQUFBLENBQUEsQ0FsQmpDLENBQUE7QUFBQSxFQW1CQSxLQUFBLEdBQVEsU0FBVSxDQUFBLENBQUEsQ0FBVixHQUFlLFNBQVUsQ0FBQSxDQUFBLENBbkJqQyxDQUFBO0FBc0JBLEVBQUEsSUFBRyxHQUFBLEtBQU8sTUFBVjtBQUNDLElBQUEsR0FBQSxHQUFNLEVBQU4sQ0FERDtHQXRCQTtBQUFBLEVBMEJBLEtBQUEsR0FBUSxLQUFBLEdBQVEsQ0FBQyxHQUFBLEdBQU0sUUFBUCxDQTFCaEIsQ0FBQTtBQUFBLEVBMkJBLEtBQUEsR0FBUSxLQUFBLEdBQVEsQ0FBQyxHQUFBLEdBQU0sUUFBUCxDQTNCaEIsQ0FBQTtBQUFBLEVBNEJBLEtBQUEsR0FBUSxLQUFBLEdBQVEsQ0FBQyxHQUFBLEdBQU0sUUFBUCxDQTVCaEIsQ0FBQTtBQUFBLEVBNkJBLEtBQUEsR0FBUSxLQUFBLEdBQVEsQ0FBQyxHQUFBLEdBQU0sUUFBUCxDQTdCaEIsQ0FBQTtBQUFBLEVBK0JBLENBQUEsR0FBSSxDQS9CSixDQUFBO0FBQUEsRUFnQ0EsVUFBQSxHQUFhLElBaENiLENBQUE7QUFBQSxFQWlDQSxhQUFBLEdBQWdCLFNBQUEsR0FBQTtXQUNmLFVBQUEsR0FBYSxLQUFLLENBQUMsUUFBTixDQUFnQixDQUFBLEdBQUUsR0FBbEIsRUFBd0IsU0FBQSxHQUFBO0FBQ3BDLE1BQUEsQ0FBQSxFQUFBLENBQUE7QUFBQSxNQUNBLENBQUEsR0FBSSxDQUFBLEdBQUksS0FEUixDQUFBO0FBQUEsTUFFQSxDQUFBLEdBQUksQ0FBQSxHQUFJLEtBRlIsQ0FBQTtBQUFBLE1BR0EsQ0FBQSxHQUFJLENBQUEsR0FBSSxLQUhSLENBQUE7QUFBQSxNQUlBLENBQUEsR0FBSSxDQUFBLEdBQUksS0FKUixDQUFBO0FBQUEsTUFPQSxLQUFLLENBQUMsZUFBTixHQUF3QixPQUFBLEdBQVEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQVIsR0FBc0IsSUFBdEIsR0FBMkIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQTNCLEdBQXlDLElBQXpDLEdBQThDLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxDQUE5QyxHQUE0RCxJQUE1RCxHQUFpRSxDQUFqRSxHQUFtRSxHQVAzRixDQUFBO0FBUUEsTUFBQSxJQUFHLENBQUEsSUFBSyxDQUFDLEdBQUEsR0FBSSxRQUFMLENBQVI7ZUFDQyxhQUFBLENBQWMsVUFBZCxFQUREO09BVG9DO0lBQUEsQ0FBeEIsRUFERTtFQUFBLENBakNoQixDQUFBO1NBOENBLGFBQUEsQ0FBQSxFQS9DMEI7QUFBQSxDQUEzQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydHMuY29sb3VyVHJhbnNpdGlvbiA9IChsYXllciwgY29sb3VyLCBkdXJhdGlvbiwgZnBzKSAtPlxuXHRvbGRDb2xvdXIgPSBudWxsXG5cdG5ld0NvbG91ciA9IG51bGxcblx0IyBzZXQgb2xkIGFuZCBuZXcgY29sb3VycyBhcyB2YXJpYWJsZXNcblx0b2xkQ29sb3VyID0gbGF5ZXIuYmFja2dyb3VuZENvbG9yXG5cdG5ld0NvbG91ciA9IGNvbG91clxuXHRvbGRDb2xvdXIgPSBvbGRDb2xvdXIuc3Vic3RyaW5nKDUsIG9sZENvbG91ci5sZW5ndGggLSAxKVxuXHRvbGRDb2xvdXIgPSBvbGRDb2xvdXIuc3BsaXQoJywgJylcblx0bmV3Q29sb3VyID0gbmV3Q29sb3VyLnN1YnN0cmluZyg1LCBuZXdDb2xvdXIubGVuZ3RoIC0gMSlcblx0bmV3Q29sb3VyID0gbmV3Q29sb3VyLnNwbGl0KCcsICcpXG5cdFxuXHRyID0gcGFyc2VGbG9hdChvbGRDb2xvdXJbMF0pXG5cdGcgPSBwYXJzZUZsb2F0KG9sZENvbG91clsxXSlcblx0YiA9IHBhcnNlRmxvYXQob2xkQ29sb3VyWzJdKVxuXHRhID0gcGFyc2VGbG9hdChvbGRDb2xvdXJbM10pXG5cdFxuXHQjIENhbGN1bGF0ZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGNvbG91cnNcblx0ckRpZmYgPSBvbGRDb2xvdXJbMF0gLSBuZXdDb2xvdXJbMF1cblx0Z0RpZmYgPSBvbGRDb2xvdXJbMV0gLSBuZXdDb2xvdXJbMV1cblx0YkRpZmYgPSBvbGRDb2xvdXJbMl0gLSBuZXdDb2xvdXJbMl1cblx0YURpZmYgPSBvbGRDb2xvdXJbM10gLSBuZXdDb2xvdXJbM11cblx0XG5cdCMgU2V0cyBhIGZyYW1lIGRlZmF1bHRcblx0aWYgZnBzID09IHVuZGVmaW5lZFxuXHRcdGZwcyA9IDMwXG5cdFx0XG5cdCMgQ2FsY3VsYXRlIHRoZSBpbmNyZW1lbnRzXG5cdHJEaWZmID0gckRpZmYgLyAoZnBzICogZHVyYXRpb24pXG5cdGdEaWZmID0gZ0RpZmYgLyAoZnBzICogZHVyYXRpb24pXG5cdGJEaWZmID0gYkRpZmYgLyAoZnBzICogZHVyYXRpb24pXG5cdGFEaWZmID0gYURpZmYgLyAoZnBzICogZHVyYXRpb24pXG5cdCMjIHByaW50IFwiKHJEaWZmIEluY3JlbWVudHMpXCIgKyByRGlmZiArIFwiKGdEaWZmIEluY3JlbWVudHMpXCIgKyBnRGlmZiArIFwiKGJEaWZmIEluY3JlbWVudHMpXCIgKyBiRGlmZiArIFwiKGFEaWZmIEluY3JlbWVudHMpXCIgKyBhRGlmZlxuXHRpID0gMFxuXHRteUludGVydmFsID0gbnVsbFxuXHRzdGFydEludGVydmFsID0gLT5cblx0XHRteUludGVydmFsID0gVXRpbHMuaW50ZXJ2YWwgKDEvZnBzKSwgLT5cblx0XHRcdGkrK1xuXHRcdFx0ciA9IHIgLSByRGlmZlxuXHRcdFx0ZyA9IGcgLSBnRGlmZlxuXHRcdFx0YiA9IGIgLSBiRGlmZlxuXHRcdFx0YSA9IGEgLSBhRGlmZlxuXHRcdFx0IyBOdW1iZXJzIGhhdmUgdG8gYmUgd2hvbGUgdG8gcmVnZXN0ZXIgYXMgYSBwcm9wZXIgUkdCIHZhbHVlLiBcblx0XHRcdCMgUmVuZGVyIGNvbG91ciB1c2luZyB0aGUgY2hhbmdpbmcgdmFyaWFibGUuXG5cdFx0XHRsYXllci5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgnK01hdGgucm91bmQocikrJywgJytNYXRoLnJvdW5kKGcpKycsICcrTWF0aC5yb3VuZChiKSsnLCAnK2ErJyknXG5cdFx0XHRpZiBpID49IChmcHMqZHVyYXRpb24pXG5cdFx0XHRcdGNsZWFySW50ZXJ2YWwobXlJbnRlcnZhbClcblx0XHRcdCMjIHByaW50IGkgKyBcIihSKVwiICsgTWF0aC5yb3VuZChyKSArIFwiKEcpXCIgKyBNYXRoLnJvdW5kKGcpICsgXCIoQilcIiArIE1hdGgucm91bmQoYikgKyBcIihBKVwiICsgYVxuXHRzdGFydEludGVydmFsKClcblx0IyMgVE9ET1xuXHQjIyBTZXQgdGhlIHRydWUgY29sb3VyIHZhbHVlIGFmdGVyIGZhZGUgZW5kcy4iXX0=
