require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"colourTransition":[function(require,module,exports){
exports.colourTransition = function(layer, colour, duration, fps) {
  var a, aDiff, b, bDiff, g, gDiff, i, myInterval, newColour, oldColour, r, rDiff, startInterval;
  oldColour = null;
  newColour = null;
  oldColour = layer.backgroundColor;
  newColour = colour;
  oldColour = oldColour.substring(5, oldColour.length - 1);
  oldColour = oldColour.split(', ');
  newColour = newColour.substring(5, newColour.length - 1);
  newColour = newColour.split(', ');
  r = parseFloat(oldColour[0]);
  g = parseFloat(oldColour[1]);
  b = parseFloat(oldColour[2]);
  a = parseFloat(oldColour[3]);
  rDiff = oldColour[0] - newColour[0];
  gDiff = oldColour[1] - newColour[1];
  bDiff = oldColour[2] - newColour[2];
  aDiff = oldColour[3] - newColour[3];
  if (fps === void 0) {
    fps = 30;
  }
  rDiff = rDiff / (fps * duration);
  gDiff = gDiff / (fps * duration);
  bDiff = bDiff / (fps * duration);
  aDiff = aDiff / (fps * duration);
  i = 0;
  myInterval = null;
  startInterval = function() {
    return myInterval = Utils.interval(1 / fps, function() {
      i++;
      r = r - rDiff;
      g = g - gDiff;
      b = b - bDiff;
      a = a - aDiff;
      layer.backgroundColor = 'rgba(' + Math.round(r) + ', ' + Math.round(g) + ', ' + Math.round(b) + ', ' + a + ')';
      if (i >= (fps * duration)) {
        return clearInterval(myInterval);
      }
    });
  };
  return startInterval();
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTmljay9EZXNrdG9wL0NvbG91ciBUcmFuc2l0aW9uIE1vZHVsZS5mcmFtZXIvbW9kdWxlcy9jb2xvdXJUcmFuc2l0aW9uLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLE9BQU8sQ0FBQyxnQkFBUixHQUEyQixTQUFDLEtBQUQsRUFBUSxNQUFSLEVBQWdCLFFBQWhCLEVBQTBCLEdBQTFCLEdBQUE7QUFDMUIsTUFBQSwwRkFBQTtBQUFBLEVBQUEsU0FBQSxHQUFZLElBQVosQ0FBQTtBQUFBLEVBQ0EsU0FBQSxHQUFZLElBRFosQ0FBQTtBQUFBLEVBR0EsU0FBQSxHQUFZLEtBQUssQ0FBQyxlQUhsQixDQUFBO0FBQUEsRUFJQSxTQUFBLEdBQVksTUFKWixDQUFBO0FBQUEsRUFLQSxTQUFBLEdBQVksU0FBUyxDQUFDLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBdUIsU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBMUMsQ0FMWixDQUFBO0FBQUEsRUFNQSxTQUFBLEdBQVksU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsSUFBaEIsQ0FOWixDQUFBO0FBQUEsRUFPQSxTQUFBLEdBQVksU0FBUyxDQUFDLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBdUIsU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBMUMsQ0FQWixDQUFBO0FBQUEsRUFRQSxTQUFBLEdBQVksU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsSUFBaEIsQ0FSWixDQUFBO0FBQUEsRUFVQSxDQUFBLEdBQUksVUFBQSxDQUFXLFNBQVUsQ0FBQSxDQUFBLENBQXJCLENBVkosQ0FBQTtBQUFBLEVBV0EsQ0FBQSxHQUFJLFVBQUEsQ0FBVyxTQUFVLENBQUEsQ0FBQSxDQUFyQixDQVhKLENBQUE7QUFBQSxFQVlBLENBQUEsR0FBSSxVQUFBLENBQVcsU0FBVSxDQUFBLENBQUEsQ0FBckIsQ0FaSixDQUFBO0FBQUEsRUFhQSxDQUFBLEdBQUksVUFBQSxDQUFXLFNBQVUsQ0FBQSxDQUFBLENBQXJCLENBYkosQ0FBQTtBQUFBLEVBZ0JBLEtBQUEsR0FBUSxTQUFVLENBQUEsQ0FBQSxDQUFWLEdBQWUsU0FBVSxDQUFBLENBQUEsQ0FoQmpDLENBQUE7QUFBQSxFQWlCQSxLQUFBLEdBQVEsU0FBVSxDQUFBLENBQUEsQ0FBVixHQUFlLFNBQVUsQ0FBQSxDQUFBLENBakJqQyxDQUFBO0FBQUEsRUFrQkEsS0FBQSxHQUFRLFNBQVUsQ0FBQSxDQUFBLENBQVYsR0FBZSxTQUFVLENBQUEsQ0FBQSxDQWxCakMsQ0FBQTtBQUFBLEVBbUJBLEtBQUEsR0FBUSxTQUFVLENBQUEsQ0FBQSxDQUFWLEdBQWUsU0FBVSxDQUFBLENBQUEsQ0FuQmpDLENBQUE7QUFzQkEsRUFBQSxJQUFHLEdBQUEsS0FBTyxNQUFWO0FBQ0MsSUFBQSxHQUFBLEdBQU0sRUFBTixDQUREO0dBdEJBO0FBQUEsRUEwQkEsS0FBQSxHQUFRLEtBQUEsR0FBUSxDQUFDLEdBQUEsR0FBTSxRQUFQLENBMUJoQixDQUFBO0FBQUEsRUEyQkEsS0FBQSxHQUFRLEtBQUEsR0FBUSxDQUFDLEdBQUEsR0FBTSxRQUFQLENBM0JoQixDQUFBO0FBQUEsRUE0QkEsS0FBQSxHQUFRLEtBQUEsR0FBUSxDQUFDLEdBQUEsR0FBTSxRQUFQLENBNUJoQixDQUFBO0FBQUEsRUE2QkEsS0FBQSxHQUFRLEtBQUEsR0FBUSxDQUFDLEdBQUEsR0FBTSxRQUFQLENBN0JoQixDQUFBO0FBQUEsRUErQkEsQ0FBQSxHQUFJLENBL0JKLENBQUE7QUFBQSxFQWdDQSxVQUFBLEdBQWEsSUFoQ2IsQ0FBQTtBQUFBLEVBaUNBLGFBQUEsR0FBZ0IsU0FBQSxHQUFBO1dBQ2YsVUFBQSxHQUFhLEtBQUssQ0FBQyxRQUFOLENBQWdCLENBQUEsR0FBRSxHQUFsQixFQUF3QixTQUFBLEdBQUE7QUFDcEMsTUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLE1BQ0EsQ0FBQSxHQUFJLENBQUEsR0FBSSxLQURSLENBQUE7QUFBQSxNQUVBLENBQUEsR0FBSSxDQUFBLEdBQUksS0FGUixDQUFBO0FBQUEsTUFHQSxDQUFBLEdBQUksQ0FBQSxHQUFJLEtBSFIsQ0FBQTtBQUFBLE1BSUEsQ0FBQSxHQUFJLENBQUEsR0FBSSxLQUpSLENBQUE7QUFBQSxNQU9BLEtBQUssQ0FBQyxlQUFOLEdBQXdCLE9BQUEsR0FBUSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVgsQ0FBUixHQUFzQixJQUF0QixHQUEyQixJQUFJLENBQUMsS0FBTCxDQUFXLENBQVgsQ0FBM0IsR0FBeUMsSUFBekMsR0FBOEMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQTlDLEdBQTRELElBQTVELEdBQWlFLENBQWpFLEdBQW1FLEdBUDNGLENBQUE7QUFRQSxNQUFBLElBQUcsQ0FBQSxJQUFLLENBQUMsR0FBQSxHQUFJLFFBQUwsQ0FBUjtlQUNDLGFBQUEsQ0FBYyxVQUFkLEVBREQ7T0FUb0M7SUFBQSxDQUF4QixFQURFO0VBQUEsQ0FqQ2hCLENBQUE7U0E4Q0EsYUFBQSxDQUFBLEVBL0MwQjtBQUFBLENBQTNCLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0cy5jb2xvdXJUcmFuc2l0aW9uID0gKGxheWVyLCBjb2xvdXIsIGR1cmF0aW9uLCBmcHMpIC0+XG5cdG9sZENvbG91ciA9IG51bGxcblx0bmV3Q29sb3VyID0gbnVsbFxuXHQjIHNldCBvbGQgYW5kIG5ldyBjb2xvdXJzIGFzIHZhcmlhYmxlc1xuXHRvbGRDb2xvdXIgPSBsYXllci5iYWNrZ3JvdW5kQ29sb3Jcblx0bmV3Q29sb3VyID0gY29sb3VyXG5cdG9sZENvbG91ciA9IG9sZENvbG91ci5zdWJzdHJpbmcoNSwgb2xkQ29sb3VyLmxlbmd0aCAtIDEpXG5cdG9sZENvbG91ciA9IG9sZENvbG91ci5zcGxpdCgnLCAnKVxuXHRuZXdDb2xvdXIgPSBuZXdDb2xvdXIuc3Vic3RyaW5nKDUsIG5ld0NvbG91ci5sZW5ndGggLSAxKVxuXHRuZXdDb2xvdXIgPSBuZXdDb2xvdXIuc3BsaXQoJywgJylcblx0XG5cdHIgPSBwYXJzZUZsb2F0KG9sZENvbG91clswXSlcblx0ZyA9IHBhcnNlRmxvYXQob2xkQ29sb3VyWzFdKVxuXHRiID0gcGFyc2VGbG9hdChvbGRDb2xvdXJbMl0pXG5cdGEgPSBwYXJzZUZsb2F0KG9sZENvbG91clszXSlcblx0XG5cdCMgQ2FsY3VsYXRlcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gY29sb3Vyc1xuXHRyRGlmZiA9IG9sZENvbG91clswXSAtIG5ld0NvbG91clswXVxuXHRnRGlmZiA9IG9sZENvbG91clsxXSAtIG5ld0NvbG91clsxXVxuXHRiRGlmZiA9IG9sZENvbG91clsyXSAtIG5ld0NvbG91clsyXVxuXHRhRGlmZiA9IG9sZENvbG91clszXSAtIG5ld0NvbG91clszXVxuXHRcblx0IyBTZXRzIGEgZnJhbWUgZGVmYXVsdFxuXHRpZiBmcHMgPT0gdW5kZWZpbmVkXG5cdFx0ZnBzID0gMzBcblx0XHRcblx0IyBDYWxjdWxhdGUgdGhlIGluY3JlbWVudHNcblx0ckRpZmYgPSByRGlmZiAvIChmcHMgKiBkdXJhdGlvbilcblx0Z0RpZmYgPSBnRGlmZiAvIChmcHMgKiBkdXJhdGlvbilcblx0YkRpZmYgPSBiRGlmZiAvIChmcHMgKiBkdXJhdGlvbilcblx0YURpZmYgPSBhRGlmZiAvIChmcHMgKiBkdXJhdGlvbilcblx0IyMgcHJpbnQgXCIockRpZmYgSW5jcmVtZW50cylcIiArIHJEaWZmICsgXCIoZ0RpZmYgSW5jcmVtZW50cylcIiArIGdEaWZmICsgXCIoYkRpZmYgSW5jcmVtZW50cylcIiArIGJEaWZmICsgXCIoYURpZmYgSW5jcmVtZW50cylcIiArIGFEaWZmXG5cdGkgPSAwXG5cdG15SW50ZXJ2YWwgPSBudWxsXG5cdHN0YXJ0SW50ZXJ2YWwgPSAtPlxuXHRcdG15SW50ZXJ2YWwgPSBVdGlscy5pbnRlcnZhbCAoMS9mcHMpLCAtPlxuXHRcdFx0aSsrXG5cdFx0XHRyID0gciAtIHJEaWZmXG5cdFx0XHRnID0gZyAtIGdEaWZmXG5cdFx0XHRiID0gYiAtIGJEaWZmXG5cdFx0XHRhID0gYSAtIGFEaWZmXG5cdFx0XHQjIE51bWJlcnMgaGF2ZSB0byBiZSB3aG9sZSB0byByZWdlc3RlciBhcyBhIHByb3BlciBSR0IgdmFsdWUuIFxuXHRcdFx0IyBSZW5kZXIgY29sb3VyIHVzaW5nIHRoZSBjaGFuZ2luZyB2YXJpYWJsZS5cblx0XHRcdGxheWVyLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKCcrTWF0aC5yb3VuZChyKSsnLCAnK01hdGgucm91bmQoZykrJywgJytNYXRoLnJvdW5kKGIpKycsICcrYSsnKSdcblx0XHRcdGlmIGkgPj0gKGZwcypkdXJhdGlvbilcblx0XHRcdFx0Y2xlYXJJbnRlcnZhbChteUludGVydmFsKVxuXHRcdFx0IyMgcHJpbnQgaSArIFwiKFIpXCIgKyBNYXRoLnJvdW5kKHIpICsgXCIoRylcIiArIE1hdGgucm91bmQoZykgKyBcIihCKVwiICsgTWF0aC5yb3VuZChiKSArIFwiKEEpXCIgKyBhXG5cdHN0YXJ0SW50ZXJ2YWwoKVxuXHQjIyBUT0RPXG5cdCMjIFNldCB0aGUgdHJ1ZSBjb2xvdXIgdmFsdWUgYWZ0ZXIgZmFkZSBlbmRzLiJdfQ==
